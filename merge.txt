Git Merging Exercise

## Part 1: Fast Forward Merge
**Your goal is to generate a fast forward merge. Demonstrate that you understand how FF merges work by creating one on your own!**

Make a new branch. Do some work in the repo such that when you merge the new branch into master, 
it results in a fast forward merge.  Merge that branch into master and see if you were right!

mkdir Merging-Exercise
cd Merging-Exercise/
git status
git init
touch greetings.txt
git add greetings.txt
git commit -m "add greetings file"

git switch -c spanish
code .      # add in greetings file "Hola"
git status
git add greetings.txt
git commit -m "add spanish greeting"
git switch master
git merge spanish

## Part 2: Merge Commit (No Conflicts)
Your goal is to generate a merge commit with NO MERGE CONFLICTS.

Create a new branch. Make some changes to the repo such that when you merge the new branch into master, it results in a merge commit. 
The merge should not result in any conflicts. Merge that branch into master and see if you were right!

git switch -c french
# update greetings.txt to Bonjour
git status
git add greetings.txt
git commit -m "add french greetings"
git switch master
# create a new file farewells.txt and put "goodbye" into
git status
git add farewells.txt
git commit -m "add farewells file"
git status
git merge french
git log --oneline


## Part 3: Conflicts!
Your goal is to generate merge a conflict!

Create a new branch.  Make some changes to the repo such that when you merge the new branch into the master branch, 
it results in a merge conflict. Merge that branch into master and see if you were right! Resolve the conflict!

git switch -c japanese
# in greetings.txt put "Konnichiwa"
git status
git add greeting.txt
git commit -m "add japanese greeting"
git switch master
# in the greetings.txt file put "hello"
git status
git add greetings.txt
git commit -m "add hello"
git merge japanese
# conflikt -> go to VScode and correct the file (keep both for instance).
git status
git add greetings.txt
git commit -m "resolve conflict"
git log --oneline














